; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Documents and Settings\Jorge Fernandez\Desktop\Sistemas Operativos I\2016-ii-1272-so1-osdevseries-jorgefer00\tutorial21\SysCore\FloppyDisk\flpydsk.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?DMA_BUFFER@@3HA				; DMA_BUFFER
_BSS	SEGMENT
__CurrentDrive DB 01H DUP (?)
__FloppyDiskIRQ DB 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
?DMA_BUFFER@@3HA DD 01000H				; DMA_BUFFER
_DATA	ENDS
PUBLIC	?dma_initialize_floppy@@YA_NPAEI@Z		; dma_initialize_floppy
EXTRN	?dma_unmask_all@@YAXH@Z:PROC			; dma_unmask_all
EXTRN	?dma_set_read@@YAXE@Z:PROC			; dma_set_read
EXTRN	?dma_set_count@@YAXEEE@Z:PROC			; dma_set_count
EXTRN	?dma_set_address@@YAXEEE@Z:PROC			; dma_set_address
EXTRN	?dma_reset_flipflop@@YAXH@Z:PROC		; dma_reset_flipflop
EXTRN	?dma_mask_channel@@YAXE@Z:PROC			; dma_mask_channel
EXTRN	?dma_reset@@YAXH@Z:PROC				; dma_reset
; Function compile flags: /Ogtpy
; File c:\documents and settings\jorge fernandez\desktop\sistemas operativos i\2016-ii-1272-so1-osdevseries-jorgefer00\tutorial21\syscore\floppydisk\flpydsk.cpp
_TEXT	SEGMENT
_c$ = -8						; size = 4
_buffer$ = 8						; size = 4
_length$ = 12						; size = 4
?dma_initialize_floppy@@YA_NPAEI@Z PROC			; dma_initialize_floppy

; 198  : bool _cdecl dma_initialize_floppy(uint8_t* buffer, unsigned length){

	sub	esp, 8
	push	esi

; 199  :    union{
; 200  :       uint8_t byte[4];//Lo[0], Mid[1], Hi[2]
; 201  :       unsigned long l;
; 202  :    }a, c;
; 203  : 
; 204  :    a.l=(unsigned)buffer;
; 205  :    c.l=(unsigned)length-1;

	mov	esi, DWORD PTR _length$[esp+8]
	push	edi

; 206  : 
; 207  :    //Check for buffer issues
; 208  :    if ((a.l >> 24) || (c.l >> 16) || (((a.l & 0xffff)+c.l) >> 16)){

	mov	edi, DWORD PTR _buffer$[esp+12]
	dec	esi
	mov	DWORD PTR _c$[esp+16], esi
	test	edi, -16777216				; ff000000H
	jne	SHORT $LN1@dma_initia
	test	esi, -65536				; ffff0000H
	jne	SHORT $LN1@dma_initia
	movzx	eax, di
	add	eax, esi
	test	eax, -65536				; ffff0000H
	jne	SHORT $LN1@dma_initia

; 217  :    }
; 218  : 
; 219  :    dma_reset (1);

	push	1
	call	?dma_reset@@YAXH@Z			; dma_reset

; 220  :    dma_mask_channel( FDC_DMA_CHANNEL );//Mask channel 2

	push	2
	call	?dma_mask_channel@@YAXE@Z		; dma_mask_channel

; 221  :    dma_reset_flipflop ( 1 );//Flipflop reset on DMA 1

	push	1
	call	?dma_reset_flipflop@@YAXH@Z		; dma_reset_flipflop

; 222  : 
; 223  :    dma_set_address( FDC_DMA_CHANNEL, a.byte[0],a.byte[1]);//Buffer address

	mov	ecx, DWORD PTR _buffer$[esp+25]
	push	ecx
	push	edi
	push	2
	call	?dma_set_address@@YAXEEE@Z		; dma_set_address

; 224  :    dma_reset_flipflop( 1 );//Flipflop reset on DMA 1

	push	1
	call	?dma_reset_flipflop@@YAXH@Z		; dma_reset_flipflop

; 225  : 
; 226  :    dma_set_count( FDC_DMA_CHANNEL, c.byte[0],c.byte[1]);//Set count

	mov	edx, DWORD PTR _c$[esp+45]
	push	edx
	push	esi
	push	2
	call	?dma_set_count@@YAXEEE@Z		; dma_set_count

; 227  :    dma_set_read ( FDC_DMA_CHANNEL );

	push	2
	call	?dma_set_read@@YAXE@Z			; dma_set_read

; 228  : 
; 229  :    dma_unmask_all( 1 );//Unmask channel 2

	push	1
	call	?dma_unmask_all@@YAXH@Z			; dma_unmask_all
	add	esp, 48					; 00000030H
	pop	edi

; 230  : 
; 231  :    return true;

	mov	al, 1
	pop	esi

; 232  : }

	add	esp, 8
	ret	0
$LN1@dma_initia:
	pop	edi

; 209  : #ifdef _DEBUG
; 210  :       _asm{
; 211  :          mov      eax, 0x1337
; 212  :          cli
; 213  :          hlt
; 214  :       }
; 215  : #endif
; 216  :       return false;

	xor	al, al
	pop	esi

; 232  : }

	add	esp, 8
	ret	0
?dma_initialize_floppy@@YA_NPAEI@Z ENDP			; dma_initialize_floppy
_TEXT	ENDS
PUBLIC	?flpydsk_set_dma@@YAXH@Z			; flpydsk_set_dma
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_addr$ = 8						; size = 4
?flpydsk_set_dma@@YAXH@Z PROC				; flpydsk_set_dma

; 236  : 
; 237  : 	DMA_BUFFER = addr;

	mov	eax, DWORD PTR _addr$[esp-4]
	mov	DWORD PTR ?DMA_BUFFER@@3HA, eax		; DMA_BUFFER

; 238  : }

	ret	0
?flpydsk_set_dma@@YAXH@Z ENDP				; flpydsk_set_dma
_TEXT	ENDS
PUBLIC	?flpydsk_read_status@@YAEXZ			; flpydsk_read_status
EXTRN	?inportb@@YAEG@Z:PROC				; inportb
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
?flpydsk_read_status@@YAEXZ PROC			; flpydsk_read_status

; 246  : 
; 247  : 	//! just return main status register
; 248  : 	return inportb (FLPYDSK_MSR);

	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4

; 249  : }

	ret	0
?flpydsk_read_status@@YAEXZ ENDP			; flpydsk_read_status
_TEXT	ENDS
PUBLIC	?flpydsk_write_dor@@YAXE@Z			; flpydsk_write_dor
EXTRN	?outportb@@YAXGE@Z:PROC				; outportb
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_val$ = 8						; size = 1
?flpydsk_write_dor@@YAXE@Z PROC				; flpydsk_write_dor

; 253  : 
; 254  : 	//! write the digital output register
; 255  : 	outportb (FLPYDSK_DOR, val);

	mov	eax, DWORD PTR _val$[esp-4]
	push	eax
	push	1010					; 000003f2H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8

; 256  : }

	ret	0
?flpydsk_write_dor@@YAXE@Z ENDP				; flpydsk_write_dor
_TEXT	ENDS
PUBLIC	?flpydsk_send_command@@YAXE@Z			; flpydsk_send_command
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cmd$ = 8						; size = 1
?flpydsk_send_command@@YAXE@Z PROC			; flpydsk_send_command

; 259  : void flpydsk_send_command (uint8_t cmd) {

	push	esi

; 260  : 
; 261  : 	//! wait until data register is ready. We send commands to the data register
; 262  : 	for (int i = 0; i < 500; i++ )

	xor	esi, esi
$LL4@flpydsk_se:

; 263  : 		if ( flpydsk_read_status () & FLPYDSK_MSR_MASK_DATAREG )

	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN10@flpydsk_se

; 260  : 
; 261  : 	//! wait until data register is ready. We send commands to the data register
; 262  : 	for (int i = 0; i < 500; i++ )

	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL4@flpydsk_se
	pop	esi

; 265  : }

	ret	0
$LN10@flpydsk_se:

; 264  : 			return outportb (FLPYDSK_FIFO, cmd);

	mov	eax, DWORD PTR _cmd$[esp]
	push	eax
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
	pop	esi

; 265  : }

	ret	0
?flpydsk_send_command@@YAXE@Z ENDP			; flpydsk_send_command
_TEXT	ENDS
PUBLIC	?flpydsk_read_data@@YAEXZ			; flpydsk_read_data
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
?flpydsk_read_data@@YAEXZ PROC				; flpydsk_read_data

; 268  : uint8_t flpydsk_read_data () {

	push	esi

; 269  : 
; 270  : 	//! same as above function but returns data register for reading
; 271  : 	for (int i = 0; i < 500; i++ )

	xor	esi, esi
$LL4@flpydsk_re:

; 272  : 		if ( flpydsk_read_status () & FLPYDSK_MSR_MASK_DATAREG )

	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN10@flpydsk_re

; 269  : 
; 270  : 	//! same as above function but returns data register for reading
; 271  : 	for (int i = 0; i < 500; i++ )

	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL4@flpydsk_re

; 274  : 
; 275  : 	return 0;

	xor	al, al
	pop	esi

; 276  : }

	ret	0
$LN10@flpydsk_re:

; 273  : 			return inportb (FLPYDSK_FIFO);

	push	1013					; 000003f5H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	pop	esi

; 276  : }

	ret	0
?flpydsk_read_data@@YAEXZ ENDP				; flpydsk_read_data
_TEXT	ENDS
PUBLIC	?flpydsk_write_ccr@@YAXE@Z			; flpydsk_write_ccr
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_val$ = 8						; size = 1
?flpydsk_write_ccr@@YAXE@Z PROC				; flpydsk_write_ccr

; 280  : 
; 281  : 	//! write the configuation control
; 282  : 	outportb (FLPYDSK_CTRL, val);

	mov	eax, DWORD PTR _val$[esp-4]
	push	eax
	push	1015					; 000003f7H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8

; 283  : }

	ret	0
?flpydsk_write_ccr@@YAXE@Z ENDP				; flpydsk_write_ccr
_TEXT	ENDS
PUBLIC	?flpydsk_wait_irq@@YAXXZ			; flpydsk_wait_irq
; Function compile flags: /Ogtpy
;	COMDAT ?flpydsk_wait_irq@@YAXXZ
_TEXT	SEGMENT
?flpydsk_wait_irq@@YAXXZ PROC				; flpydsk_wait_irq, COMDAT

; 290  : inline void flpydsk_wait_irq () {

$LL2@flpydsk_wa:

; 291  : 
; 292  : 	//! wait for irq to fire
; 293  : 	while ( _FloppyDiskIRQ == 0)

	mov	al, BYTE PTR __FloppyDiskIRQ
	test	al, al
	je	SHORT $LL2@flpydsk_wa

; 294  : 		;
; 295  : 	_FloppyDiskIRQ = 0;

	mov	BYTE PTR __FloppyDiskIRQ, 0

; 296  : }

	ret	0
?flpydsk_wait_irq@@YAXXZ ENDP				; flpydsk_wait_irq
_TEXT	ENDS
PUBLIC	?i86_flpy_irq@@YAXXZ				; i86_flpy_irq
EXTRN	?interruptdone@@YAXI@Z:PROC			; interruptdone
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
?i86_flpy_irq@@YAXXZ PROC				; i86_flpy_irq

; 300  : void _cdecl i86_flpy_irq () {

	push	ebx
	push	esi
	push	edi

; 301  : 
; 302  : 	_asm add esp, 12

	add	esp, 12					; 0000000cH

; 303  : 	_asm pushad

	pushad

; 304  : 	_asm cli

	cli

; 305  : 
; 306  : 	//! irq fired
; 307  : 	_FloppyDiskIRQ = 1;
; 308  : 
; 309  : 	//! tell hal we are done
; 310  : 	interruptdone( FLOPPY_IRQ );

	push	6
	mov	BYTE PTR __FloppyDiskIRQ, 1
	call	?interruptdone@@YAXI@Z			; interruptdone
	add	esp, 4

; 311  : 
; 312  : 	_asm sti

	sti

; 313  : 	_asm popad

	popad

; 314  : 	_asm iretd

	iretd

; 315  : }

	pop	edi
	pop	esi
	pop	ebx
	ret	0
?i86_flpy_irq@@YAXXZ ENDP				; i86_flpy_irq
_TEXT	ENDS
PUBLIC	?flpydsk_check_int@@YAXPAI0@Z			; flpydsk_check_int
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_st0$ = 8						; size = 4
_cyl$ = 12						; size = 4
?flpydsk_check_int@@YAXPAI0@Z PROC			; flpydsk_check_int

; 322  : void flpydsk_check_int (uint32_t* st0, uint32_t* cyl) {

	push	esi

; 323  : 
; 324  : 	flpydsk_send_command (FDC_CMD_CHECK_INT);

	xor	esi, esi
$LL6@flpydsk_ch:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN30@flpydsk_ch
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL6@flpydsk_ch

; 327  : 	*cyl = flpydsk_read_data ();

	jmp	SHORT $LN4@flpydsk_ch
$LN30@flpydsk_ch:

; 323  : 
; 324  : 	flpydsk_send_command (FDC_CMD_CHECK_INT);

	push	8
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
$LN4@flpydsk_ch:

; 325  : 
; 326  : 	*st0 = flpydsk_read_data ();

	xor	esi, esi
$LL14@flpydsk_ch:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN31@flpydsk_ch
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL14@flpydsk_ch
	xor	al, al
$LN15@flpydsk_ch:
	mov	ecx, DWORD PTR _st0$[esp]
	movzx	eax, al
	mov	DWORD PTR [ecx], eax

; 327  : 	*cyl = flpydsk_read_data ();

	xor	esi, esi
	npad	9
$LL22@flpydsk_ch:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN32@flpydsk_ch
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL22@flpydsk_ch
	mov	edx, DWORD PTR _cyl$[esp]
	xor	al, al
	movzx	ecx, al
	mov	DWORD PTR [edx], ecx
	pop	esi

; 328  : }

	ret	0
$LN31@flpydsk_ch:

; 325  : 
; 326  : 	*st0 = flpydsk_read_data ();

	push	1013					; 000003f5H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	jmp	SHORT $LN15@flpydsk_ch
$LN32@flpydsk_ch:

; 327  : 	*cyl = flpydsk_read_data ();

	push	1013					; 000003f5H
	call	?inportb@@YAEG@Z			; inportb
	movzx	edx, al
	mov	eax, DWORD PTR _cyl$[esp+4]
	add	esp, 4
	mov	DWORD PTR [eax], edx
	pop	esi

; 328  : }

	ret	0
?flpydsk_check_int@@YAXPAI0@Z ENDP			; flpydsk_check_int
_TEXT	ENDS
PUBLIC	?flpydsk_control_motor@@YAX_N@Z			; flpydsk_control_motor
EXTRN	?sleep@@YAXH@Z:PROC				; sleep
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_b$ = 8							; size = 1
?flpydsk_control_motor@@YAX_N@Z PROC			; flpydsk_control_motor

; 332  : 
; 333  : 	//! sanity check: invalid drive
; 334  : 	if (_CurrentDrive > 3)

	mov	al, BYTE PTR __CurrentDrive
	cmp	al, 3
	ja	SHORT $LN10@flpydsk_co

; 335  : 		return;
; 336  : 
; 337  : 	uint8_t motor = 0;
; 338  : 
; 339  : 	//! select the correct mask based on current drive
; 340  : 	switch (_CurrentDrive) {

	movzx	ecx, al
	xor	dl, dl
	cmp	ecx, 3
	ja	SHORT $LN7@flpydsk_co
	jmp	DWORD PTR $LN18@flpydsk_co[ecx*4]
$LN6@flpydsk_co:

; 341  : 
; 342  : 		case 0:
; 343  : 			motor = FLPYDSK_DOR_MASK_DRIVE0_MOTOR;

	mov	dl, 16					; 00000010H

; 344  : 			break;

	jmp	SHORT $LN7@flpydsk_co
$LN5@flpydsk_co:

; 345  : 		case 1:
; 346  : 			motor = FLPYDSK_DOR_MASK_DRIVE1_MOTOR;

	mov	dl, 32					; 00000020H

; 347  : 			break;

	jmp	SHORT $LN7@flpydsk_co
$LN4@flpydsk_co:

; 348  : 		case 2:
; 349  : 			motor = FLPYDSK_DOR_MASK_DRIVE2_MOTOR;

	mov	dl, 64					; 00000040H

; 350  : 			break;

	jmp	SHORT $LN7@flpydsk_co
$LN3@flpydsk_co:

; 351  : 		case 3:
; 352  : 			motor = FLPYDSK_DOR_MASK_DRIVE3_MOTOR;

	mov	dl, 128					; 00000080H
$LN7@flpydsk_co:

; 353  : 			break;
; 354  : 	}
; 355  : 
; 356  : 	//! turn on or off the motor of that drive
; 357  : 	if (b)

	cmp	BYTE PTR _b$[esp-4], 0
	je	SHORT $LN2@flpydsk_co

; 358  : 		flpydsk_write_dor (uint8_t(_CurrentDrive | motor | FLPYDSK_DOR_MASK_RESET | FLPYDSK_DOR_MASK_DMA));

	or	al, dl
	or	al, 12					; 0000000cH
	movzx	eax, al
	push	eax

; 359  : 	else

	jmp	SHORT $LN17@flpydsk_co
$LN2@flpydsk_co:

; 360  : 		flpydsk_write_dor (FLPYDSK_DOR_MASK_RESET);

	push	4
$LN17@flpydsk_co:
	push	1010					; 000003f2H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8

; 361  : 
; 362  : 	//! in all cases; wait a little bit for the motor to spin up/turn off
; 363  : 	sleep (20);

	mov	DWORD PTR _b$[esp-4], 20		; 00000014H
	jmp	?sleep@@YAXH@Z				; sleep
$LN10@flpydsk_co:

; 364  : }

	ret	0
	npad	2
$LN18@flpydsk_co:
	DD	$LN6@flpydsk_co
	DD	$LN5@flpydsk_co
	DD	$LN4@flpydsk_co
	DD	$LN3@flpydsk_co
?flpydsk_control_motor@@YAX_N@Z ENDP			; flpydsk_control_motor
_TEXT	ENDS
PUBLIC	?flpydsk_drive_data@@YAXEEE_N@Z			; flpydsk_drive_data
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_data$ = 8						; size = 1
_stepr$ = 8						; size = 1
_loadt$ = 12						; size = 1
_unloadt$ = 16						; size = 1
_dma$ = 20						; size = 1
?flpydsk_drive_data@@YAXEEE_N@Z PROC			; flpydsk_drive_data

; 367  : void flpydsk_drive_data (uint8_t stepr, uint8_t loadt, uint8_t unloadt, bool dma ) {

	push	esi

; 368  : 
; 369  : 	uint8_t data = 0;
; 370  : 
; 371  : 	//! send command
; 372  : 	flpydsk_send_command (FDC_CMD_SPECIFY);

	xor	esi, esi
$LL6@flpydsk_dr:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN30@flpydsk_dr
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL6@flpydsk_dr

; 376  : 		flpydsk_send_command (data);

	jmp	SHORT $LN4@flpydsk_dr
$LN30@flpydsk_dr:

; 368  : 
; 369  : 	uint8_t data = 0;
; 370  : 
; 371  : 	//! send command
; 372  : 	flpydsk_send_command (FDC_CMD_SPECIFY);

	push	3
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
$LN4@flpydsk_dr:

; 373  : 	data = ( (stepr & 0xf) << 4) | (unloadt & 0xf);

	mov	al, BYTE PTR _stepr$[esp]
	mov	cl, BYTE PTR _unloadt$[esp]
	shl	al, 4
	and	cl, 15					; 0000000fH
	or	al, cl
	mov	BYTE PTR _data$[esp], al

; 374  : 		flpydsk_send_command (data);

	xor	esi, esi
$LL14@flpydsk_dr:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN31@flpydsk_dr
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL14@flpydsk_dr

; 376  : 		flpydsk_send_command (data);

	jmp	SHORT $LN12@flpydsk_dr
$LN31@flpydsk_dr:

; 374  : 		flpydsk_send_command (data);

	mov	edx, DWORD PTR _data$[esp]
	push	edx
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
$LN12@flpydsk_dr:

; 375  : 	data = (( loadt << 1 ) | ( (dma) ? 0 : 1 ) );

	cmp	BYTE PTR _dma$[esp], 0
	mov	cl, BYTE PTR _loadt$[esp]
	sete	al
	add	cl, cl
	or	al, cl
	mov	BYTE PTR _data$[esp], al

; 376  : 		flpydsk_send_command (data);

	xor	esi, esi
	npad	8
$LL22@flpydsk_dr:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN32@flpydsk_dr
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL22@flpydsk_dr
	pop	esi

; 377  : }

	ret	0
$LN32@flpydsk_dr:

; 376  : 		flpydsk_send_command (data);

	mov	edx, DWORD PTR _data$[esp]
	push	edx
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
	pop	esi

; 377  : }

	ret	0
?flpydsk_drive_data@@YAXEEE_N@Z ENDP			; flpydsk_drive_data
_TEXT	ENDS
PUBLIC	?flpydsk_calibrate@@YAHE@Z			; flpydsk_calibrate
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cyl$ = -8						; size = 4
_st0$ = -4						; size = 4
tv226 = 8						; size = 4
_drive$ = 8						; size = 1
?flpydsk_calibrate@@YAHE@Z PROC				; flpydsk_calibrate

; 380  : int flpydsk_calibrate (uint8_t drive) {

	sub	esp, 8

; 381  : 
; 382  : 	uint32_t st0, cyl;
; 383  : 
; 384  : 	if (drive >= 4)

	cmp	BYTE PTR _drive$[esp+4], 4
	jb	SHORT $LN5@flpydsk_ca

; 385  : 		return -2;

	mov	eax, -2					; fffffffeH

; 408  : }

	add	esp, 8
	ret	0
$LN5@flpydsk_ca:

; 386  : 
; 387  : 	//! turn on the motor
; 388  : 	flpydsk_control_motor (true);

	mov	al, BYTE PTR __CurrentDrive
	cmp	al, 3
	ja	SHORT $LN17@flpydsk_ca
	movzx	edx, al
	xor	cl, cl
	cmp	edx, 3
	ja	SHORT $LN14@flpydsk_ca
	jmp	DWORD PTR $LN89@flpydsk_ca[edx*4]
$LN13@flpydsk_ca:
	mov	cl, 16					; 00000010H
	jmp	SHORT $LN14@flpydsk_ca
$LN12@flpydsk_ca:
	mov	cl, 32					; 00000020H
	jmp	SHORT $LN14@flpydsk_ca
$LN11@flpydsk_ca:
	mov	cl, 64					; 00000040H
	jmp	SHORT $LN14@flpydsk_ca
$LN10@flpydsk_ca:
	mov	cl, 128					; 00000080H
$LN14@flpydsk_ca:
	or	al, cl
	or	al, 12					; 0000000cH
	movzx	eax, al
	push	eax
	push	1010					; 000003f2H
	call	?outportb@@YAXGE@Z			; outportb
	push	20					; 00000014H
	call	?sleep@@YAXH@Z				; sleep
	add	esp, 12					; 0000000cH
$LN17@flpydsk_ca:

; 389  : 
; 390  : 	for (int i = 0; i < 10; i++) {

	push	edi
	xor	edi, edi
	push	esi
	npad	5
$LL4@flpydsk_ca:

; 391  : 
; 392  : 		//! send command
; 393  : 		flpydsk_send_command ( FDC_CMD_CALIBRATE );

	xor	esi, esi
$LL26@flpydsk_ca:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN77@flpydsk_ca
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL26@flpydsk_ca

; 397  : 
; 398  : 		//! did we fine cylinder 0? if so, we are done
; 399  : 		if (!cyl) {

	jmp	SHORT $LN24@flpydsk_ca
$LN77@flpydsk_ca:

; 391  : 
; 392  : 		//! send command
; 393  : 		flpydsk_send_command ( FDC_CMD_CALIBRATE );

	push	7
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
$LN24@flpydsk_ca:

; 394  : 		flpydsk_send_command ( drive );

	xor	esi, esi
	npad	1
$LL34@flpydsk_ca:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN78@flpydsk_ca
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL34@flpydsk_ca

; 397  : 
; 398  : 		//! did we fine cylinder 0? if so, we are done
; 399  : 		if (!cyl) {

	jmp	SHORT $LL40@flpydsk_ca
$LN78@flpydsk_ca:

; 394  : 		flpydsk_send_command ( drive );

	mov	ecx, DWORD PTR _drive$[esp+12]
	push	ecx
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
	npad	2

; 395  : 		flpydsk_wait_irq ();

$LL40@flpydsk_ca:
	mov	dl, BYTE PTR __FloppyDiskIRQ
	test	dl, dl
	je	SHORT $LL40@flpydsk_ca

; 396  : 		flpydsk_check_int ( &st0, &cyl);

	lea	eax, DWORD PTR _cyl$[esp+16]
	push	eax
	lea	ecx, DWORD PTR _st0$[esp+20]
	push	ecx
	mov	BYTE PTR __FloppyDiskIRQ, 0
	call	?flpydsk_check_int@@YAXPAI0@Z		; flpydsk_check_int
	add	esp, 8

; 397  : 
; 398  : 		//! did we fine cylinder 0? if so, we are done
; 399  : 		if (!cyl) {

	cmp	DWORD PTR _cyl$[esp+16], 0
	je	SHORT $LN79@flpydsk_ca

; 389  : 
; 390  : 	for (int i = 0; i < 10; i++) {

	inc	edi
	cmp	edi, 10					; 0000000aH
	jl	$LL4@flpydsk_ca

; 403  : 		}
; 404  : 	}
; 405  : 
; 406  : 	flpydsk_control_motor (false);

	mov	al, BYTE PTR __CurrentDrive
	cmp	al, 3
	ja	SHORT $LN67@flpydsk_ca
	push	4
	push	1010					; 000003f2H
	call	?outportb@@YAXGE@Z			; outportb
	push	20					; 00000014H
	call	?sleep@@YAXH@Z				; sleep
	add	esp, 12					; 0000000cH
$LN67@flpydsk_ca:

; 407  : 	return -1;

	pop	esi
	or	eax, -1
	pop	edi

; 408  : }

	add	esp, 8
	ret	0
$LN79@flpydsk_ca:

; 400  : 
; 401  : 			flpydsk_control_motor (false);

	mov	al, BYTE PTR __CurrentDrive
	cmp	al, 3
	ja	SHORT $LN52@flpydsk_ca
	push	4
	push	1010					; 000003f2H
	call	?outportb@@YAXGE@Z			; outportb
	push	20					; 00000014H
	call	?sleep@@YAXH@Z				; sleep
	add	esp, 12					; 0000000cH
$LN52@flpydsk_ca:

; 402  : 			return 0;

	pop	esi
	xor	eax, eax
	pop	edi

; 408  : }

	add	esp, 8
	ret	0
	npad	1
$LN89@flpydsk_ca:
	DD	$LN13@flpydsk_ca
	DD	$LN12@flpydsk_ca
	DD	$LN11@flpydsk_ca
	DD	$LN10@flpydsk_ca
?flpydsk_calibrate@@YAHE@Z ENDP				; flpydsk_calibrate
_TEXT	ENDS
PUBLIC	?flpydsk_disable_controller@@YAXXZ		; flpydsk_disable_controller
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
?flpydsk_disable_controller@@YAXXZ PROC			; flpydsk_disable_controller

; 412  : 
; 413  : 	flpydsk_write_dor (0);

	push	0
	push	1010					; 000003f2H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8

; 414  : }

	ret	0
?flpydsk_disable_controller@@YAXXZ ENDP			; flpydsk_disable_controller
_TEXT	ENDS
PUBLIC	?flpydsk_enable_controller@@YAXXZ		; flpydsk_enable_controller
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
?flpydsk_enable_controller@@YAXXZ PROC			; flpydsk_enable_controller

; 418  : 
; 419  : 	flpydsk_write_dor ( FLPYDSK_DOR_MASK_RESET | FLPYDSK_DOR_MASK_DMA);

	push	12					; 0000000cH
	push	1010					; 000003f2H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8

; 420  : }

	ret	0
?flpydsk_enable_controller@@YAXXZ ENDP			; flpydsk_enable_controller
_TEXT	ENDS
PUBLIC	?flpydsk_reset@@YAXXZ				; flpydsk_reset
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cyl$ = -8						; size = 4
_st0$ = -4						; size = 4
?flpydsk_reset@@YAXXZ PROC				; flpydsk_reset

; 423  : void flpydsk_reset () {

	sub	esp, 8

; 424  : 
; 425  : 	uint32_t st0, cyl;
; 426  : 
; 427  : 	//! reset the controller
; 428  : 	flpydsk_disable_controller ();

	push	0
	push	1010					; 000003f2H
	call	?outportb@@YAXGE@Z			; outportb

; 429  : 	flpydsk_enable_controller ();

	push	12					; 0000000cH
	push	1010					; 000003f2H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 16					; 00000010H
	npad	2

; 430  : 	flpydsk_wait_irq ();

$LL15@flpydsk_re@2:
	mov	al, BYTE PTR __FloppyDiskIRQ
	test	al, al
	je	SHORT $LL15@flpydsk_re@2
	push	esi
	mov	BYTE PTR __FloppyDiskIRQ, 0
	mov	esi, 4
$LL3@flpydsk_re@2:

; 431  : 
; 432  : 	//! send CHECK_INT/SENSE INTERRUPT command to all drives
; 433  : 	for (int i=0; i<4; i++)
; 434  : 		flpydsk_check_int (&st0,&cyl);

	lea	ecx, DWORD PTR _cyl$[esp+12]
	push	ecx
	lea	edx, DWORD PTR _st0$[esp+16]
	push	edx
	call	?flpydsk_check_int@@YAXPAI0@Z		; flpydsk_check_int
	add	esp, 8
	dec	esi
	jne	SHORT $LL3@flpydsk_re@2

; 435  : 
; 436  : 	//! transfer speed 500kb/s
; 437  : 	flpydsk_write_ccr (0);

	push	esi
	push	1015					; 000003f7H
	call	?outportb@@YAXGE@Z			; outportb

; 438  : 
; 439  : 	//! pass mechanical drive info. steprate=3ms, unload time=240ms, load time=16ms
; 440  : 	flpydsk_drive_data (3,16,240,true);

	push	1
	push	240					; 000000f0H
	push	16					; 00000010H
	push	3
	call	?flpydsk_drive_data@@YAXEEE_N@Z		; flpydsk_drive_data

; 441  : 
; 442  : 	//! calibrate the disk
; 443  : 	flpydsk_calibrate ( _CurrentDrive );

	movzx	eax, BYTE PTR __CurrentDrive
	push	eax
	call	?flpydsk_calibrate@@YAHE@Z		; flpydsk_calibrate
	add	esp, 28					; 0000001cH
	pop	esi

; 444  : }

	add	esp, 8
	ret	0
?flpydsk_reset@@YAXXZ ENDP				; flpydsk_reset
_TEXT	ENDS
PUBLIC	?flpydsk_read_sector_imp@@YAXEEE@Z		; flpydsk_read_sector_imp
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_head$ = 8						; size = 1
$T3196 = 8						; size = 1
_st0$ = 8						; size = 4
_track$ = 12						; size = 1
_sector$ = 16						; size = 1
_cyl$ = 16						; size = 4
?flpydsk_read_sector_imp@@YAXEEE@Z PROC			; flpydsk_read_sector_imp

; 448  : 
; 449  : 	uint32_t st0, cyl;
; 450  : 
; 451  : 	//! initialize DMA
; 452  : 	dma_initialize_floppy ((uint8_t*) DMA_BUFFER, 512 );

	mov	eax, DWORD PTR ?DMA_BUFFER@@3HA		; DMA_BUFFER
	push	esi
	push	edi
	push	512					; 00000200H
	push	eax
	call	?dma_initialize_floppy@@YA_NPAEI@Z	; dma_initialize_floppy

; 453  : 
; 454  : 	//! set the DMA for read transfer
; 455  : 	dma_set_read ( FDC_DMA_CHANNEL );

	push	2
	call	?dma_set_read@@YAXE@Z			; dma_set_read
	add	esp, 12					; 0000000cH

; 456  : 
; 457  : 	//! read in a sector
; 458  : 	flpydsk_send_command (
; 459  : 				FDC_CMD_READ_SECT | FDC_CMD_EXT_MULTITRACK | FDC_CMD_EXT_SKIP | FDC_CMD_EXT_DENSITY);

	xor	esi, esi
	npad	2
$LL11@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN104@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL11@flpydsk_re@3

; 474  : 		flpydsk_read_data ();

	jmp	SHORT $LN9@flpydsk_re@3
$LN104@flpydsk_re@3:

; 456  : 
; 457  : 	//! read in a sector
; 458  : 	flpydsk_send_command (
; 459  : 				FDC_CMD_READ_SECT | FDC_CMD_EXT_MULTITRACK | FDC_CMD_EXT_SKIP | FDC_CMD_EXT_DENSITY);

	push	230					; 000000e6H
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
$LN9@flpydsk_re@3:

; 460  : 	flpydsk_send_command ( head << 2 | _CurrentDrive );

	push	ebx
	mov	ebx, DWORD PTR _head$[esp+8]
	mov	cl, bl
	add	cl, cl
	add	cl, cl
	or	cl, BYTE PTR __CurrentDrive
	xor	esi, esi
	mov	BYTE PTR $T3196[esp+8], cl
$LL19@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN105@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL19@flpydsk_re@3

; 474  : 		flpydsk_read_data ();

	jmp	SHORT $LN17@flpydsk_re@3
$LN105@flpydsk_re@3:

; 460  : 	flpydsk_send_command ( head << 2 | _CurrentDrive );

	mov	edx, DWORD PTR $T3196[esp+8]
	push	edx
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
$LN17@flpydsk_re@3:

; 461  : 	flpydsk_send_command ( track);

	xor	esi, esi
$LL27@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN106@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL27@flpydsk_re@3

; 474  : 		flpydsk_read_data ();

	jmp	SHORT $LN25@flpydsk_re@3
$LN106@flpydsk_re@3:

; 461  : 	flpydsk_send_command ( track);

	mov	eax, DWORD PTR _track$[esp+8]
	push	eax
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
$LN25@flpydsk_re@3:

; 462  : 	flpydsk_send_command ( head);

	xor	esi, esi
$LL35@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN107@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL35@flpydsk_re@3

; 474  : 		flpydsk_read_data ();

	jmp	SHORT $LN33@flpydsk_re@3
$LN107@flpydsk_re@3:

; 462  : 	flpydsk_send_command ( head);

	push	ebx
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
$LN33@flpydsk_re@3:

; 463  : 	flpydsk_send_command ( sector);

	xor	esi, esi
	pop	ebx
$LL43@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN108@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL43@flpydsk_re@3

; 474  : 		flpydsk_read_data ();

	jmp	SHORT $LN41@flpydsk_re@3
$LN108@flpydsk_re@3:

; 463  : 	flpydsk_send_command ( sector);

	mov	ecx, DWORD PTR _sector$[esp+4]
	push	ecx
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
$LN41@flpydsk_re@3:

; 464  : 	flpydsk_send_command ( FLPYDSK_SECTOR_DTL_512 );

	xor	esi, esi
$LL51@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN109@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL51@flpydsk_re@3

; 474  : 		flpydsk_read_data ();

	jmp	SHORT $LN49@flpydsk_re@3
$LN109@flpydsk_re@3:

; 464  : 	flpydsk_send_command ( FLPYDSK_SECTOR_DTL_512 );

	push	2
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
$LN49@flpydsk_re@3:

; 465  : 	flpydsk_send_command ( ( ( sector + 1 ) >= FLPY_SECTORS_PER_TRACK ) ? FLPY_SECTORS_PER_TRACK : sector + 1 );

	movzx	eax, BYTE PTR _sector$[esp+4]
	inc	eax
	mov	edi, 18					; 00000012H
	cmp	eax, 18					; 00000012H
	jge	SHORT $LN7@flpydsk_re@3
	mov	edi, eax
$LN7@flpydsk_re@3:
	xor	esi, esi
$LL59@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN110@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL59@flpydsk_re@3

; 474  : 		flpydsk_read_data ();

	jmp	SHORT $LN57@flpydsk_re@3
$LN110@flpydsk_re@3:

; 465  : 	flpydsk_send_command ( ( ( sector + 1 ) >= FLPY_SECTORS_PER_TRACK ) ? FLPY_SECTORS_PER_TRACK : sector + 1 );

	push	edi
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
$LN57@flpydsk_re@3:

; 466  : 	flpydsk_send_command ( FLPYDSK_GAP3_LENGTH_3_5 );

	xor	esi, esi
	npad	3
$LL67@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN111@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL67@flpydsk_re@3

; 474  : 		flpydsk_read_data ();

	jmp	SHORT $LN65@flpydsk_re@3
$LN111@flpydsk_re@3:

; 466  : 	flpydsk_send_command ( FLPYDSK_GAP3_LENGTH_3_5 );

	push	27					; 0000001bH
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
$LN65@flpydsk_re@3:

; 467  : 	flpydsk_send_command ( 0xff );

	xor	esi, esi
	npad	3
$LL75@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN112@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL75@flpydsk_re@3

; 474  : 		flpydsk_read_data ();

	jmp	SHORT $LL81@flpydsk_re@3
$LN112@flpydsk_re@3:

; 467  : 	flpydsk_send_command ( 0xff );

	push	255					; 000000ffH
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
	npad	2

; 468  : 
; 469  : 	//! wait for irq
; 470  : 	flpydsk_wait_irq ();

$LL81@flpydsk_re@3:
	mov	dl, BYTE PTR __FloppyDiskIRQ
	test	dl, dl
	je	SHORT $LL81@flpydsk_re@3
	mov	BYTE PTR __FloppyDiskIRQ, 0
	mov	edi, 7
	npad	10
$LL3@flpydsk_re@3:

; 474  : 		flpydsk_read_data ();

	xor	esi, esi
$LL87@flpydsk_re@3:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN113@flpydsk_re@3
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL87@flpydsk_re@3
	jmp	SHORT $LN2@flpydsk_re@3
$LN113@flpydsk_re@3:
	push	1013					; 000003f5H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
$LN2@flpydsk_re@3:

; 471  : 
; 472  : 	//! read status info
; 473  : 	for (int j=0; j<7; j++)

	dec	edi
	jne	SHORT $LL3@flpydsk_re@3

; 475  : 
; 476  : 	//! let FDC know we handled interrupt
; 477  : 	flpydsk_check_int (&st0,&cyl);

	lea	eax, DWORD PTR _cyl$[esp+4]
	push	eax
	lea	ecx, DWORD PTR _st0$[esp+8]
	push	ecx
	call	?flpydsk_check_int@@YAXPAI0@Z		; flpydsk_check_int
	add	esp, 8
	pop	edi
	pop	esi

; 478  : }

	ret	0
?flpydsk_read_sector_imp@@YAXEEE@Z ENDP			; flpydsk_read_sector_imp
_TEXT	ENDS
PUBLIC	?flpydsk_seek@@YAHEE@Z				; flpydsk_seek
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
$T3376 = -12						; size = 1
_cyl0$ = -8						; size = 4
_st0$ = -4						; size = 4
_cyl$ = 8						; size = 1
_head$ = 12						; size = 1
?flpydsk_seek@@YAHEE@Z PROC				; flpydsk_seek

; 481  : int flpydsk_seek ( uint8_t cyl, uint8_t head ) {

	sub	esp, 12					; 0000000cH

; 482  : 
; 483  : 	uint32_t st0, cyl0;
; 484  : 
; 485  : 	if (_CurrentDrive >= 4)

	cmp	BYTE PTR __CurrentDrive, 4
	jb	SHORT $LN5@flpydsk_se@2

; 486  : 		return -1;

	or	eax, -1

; 505  : }

	add	esp, 12					; 0000000cH
	ret	0
$LN5@flpydsk_se@2:
	push	ebx

; 487  : 
; 488  : 	for (int i = 0; i < 10; i++ ) {

	mov	bl, BYTE PTR _head$[esp+12]
	push	ebp
	movzx	ebp, BYTE PTR _cyl$[esp+16]
	push	edi
	add	bl, bl
	xor	edi, edi
	add	bl, bl
	push	esi
	npad	10
$LL51@flpydsk_se@2:

; 489  : 
; 490  : 		//! send the command
; 491  : 		flpydsk_send_command (FDC_CMD_SEEK);

	xor	esi, esi
$LL11@flpydsk_se@2:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN41@flpydsk_se@2
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL11@flpydsk_se@2

; 498  : 
; 499  : 		//! found the cylinder?
; 500  : 		if ( cyl0 == cyl)

	jmp	SHORT $LN9@flpydsk_se@2
$LN41@flpydsk_se@2:

; 489  : 
; 490  : 		//! send the command
; 491  : 		flpydsk_send_command (FDC_CMD_SEEK);

	push	15					; 0000000fH
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
$LN9@flpydsk_se@2:

; 492  : 		flpydsk_send_command ( (head) << 2 | _CurrentDrive);

	mov	al, bl
	or	al, BYTE PTR __CurrentDrive
	xor	esi, esi
	mov	BYTE PTR $T3376[esp+28], al
	npad	5
$LL19@flpydsk_se@2:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN42@flpydsk_se@2
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL19@flpydsk_se@2

; 498  : 
; 499  : 		//! found the cylinder?
; 500  : 		if ( cyl0 == cyl)

	jmp	SHORT $LN17@flpydsk_se@2
$LN42@flpydsk_se@2:

; 492  : 		flpydsk_send_command ( (head) << 2 | _CurrentDrive);

	mov	ecx, DWORD PTR $T3376[esp+28]
	push	ecx
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
$LN17@flpydsk_se@2:

; 493  : 		flpydsk_send_command (cyl);

	xor	esi, esi
$LL27@flpydsk_se@2:
	push	1012					; 000003f4H
	call	?inportb@@YAEG@Z			; inportb
	add	esp, 4
	test	al, al
	js	SHORT $LN43@flpydsk_se@2
	inc	esi
	cmp	esi, 500				; 000001f4H
	jl	SHORT $LL27@flpydsk_se@2

; 498  : 
; 499  : 		//! found the cylinder?
; 500  : 		if ( cyl0 == cyl)

	jmp	SHORT $LL33@flpydsk_se@2
$LN43@flpydsk_se@2:

; 493  : 		flpydsk_send_command (cyl);

	mov	edx, DWORD PTR _cyl$[esp+24]
	push	edx
	push	1013					; 000003f5H
	call	?outportb@@YAXGE@Z			; outportb
	add	esp, 8
	npad	2

; 494  : 
; 495  : 		//! wait for the results phase IRQ
; 496  : 		flpydsk_wait_irq ();

$LL33@flpydsk_se@2:
	mov	al, BYTE PTR __FloppyDiskIRQ
	test	al, al
	je	SHORT $LL33@flpydsk_se@2

; 497  : 		flpydsk_check_int (&st0,&cyl0);

	lea	ecx, DWORD PTR _cyl0$[esp+28]
	push	ecx
	lea	edx, DWORD PTR _st0$[esp+32]
	push	edx
	mov	BYTE PTR __FloppyDiskIRQ, 0
	call	?flpydsk_check_int@@YAXPAI0@Z		; flpydsk_check_int
	add	esp, 8

; 498  : 
; 499  : 		//! found the cylinder?
; 500  : 		if ( cyl0 == cyl)

	cmp	DWORD PTR _cyl0$[esp+28], ebp
	je	SHORT $LN44@flpydsk_se@2

; 487  : 
; 488  : 	for (int i = 0; i < 10; i++ ) {

	inc	edi
	cmp	edi, 10					; 0000000aH
	jl	$LL51@flpydsk_se@2

; 502  : 	}
; 503  : 
; 504  : 	return -1;

	pop	esi
	pop	edi
	pop	ebp
	or	eax, -1
	pop	ebx

; 505  : }

	add	esp, 12					; 0000000cH
	ret	0
$LN44@flpydsk_se@2:
	pop	esi
	pop	edi
	pop	ebp

; 501  : 			return 0;

	xor	eax, eax
	pop	ebx

; 505  : }

	add	esp, 12					; 0000000cH
	ret	0
?flpydsk_seek@@YAHEE@Z ENDP				; flpydsk_seek
_TEXT	ENDS
PUBLIC	?flpydsk_lba_to_chs@@YAXHPAH00@Z		; flpydsk_lba_to_chs
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_lba$ = 8						; size = 4
_head$ = 12						; size = 4
_track$ = 16						; size = 4
_sector$ = 20						; size = 4
?flpydsk_lba_to_chs@@YAXHPAH00@Z PROC			; flpydsk_lba_to_chs

; 513  : 
; 514  :    *head = ( lba % ( FLPY_SECTORS_PER_TRACK * 2 ) ) / ( FLPY_SECTORS_PER_TRACK );

	mov	ecx, DWORD PTR _lba$[esp-4]
	mov	eax, 954437177				; 38e38e39H
	imul	ecx
	sar	edx, 3
	push	esi
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	lea	eax, DWORD PTR [esi+esi*8]
	add	eax, eax
	add	eax, eax
	mov	edx, ecx
	sub	edx, eax
	mov	eax, 954437177				; 38e38e39H
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	edx, DWORD PTR _head$[esp]
	mov	DWORD PTR [edx], eax

; 515  :    *track = lba / ( FLPY_SECTORS_PER_TRACK * 2 );

	mov	eax, DWORD PTR _track$[esp]
	mov	DWORD PTR [eax], esi

; 516  :    *sector = lba % FLPY_SECTORS_PER_TRACK + 1;

	mov	eax, 954437177				; 38e38e39H
	imul	ecx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	edx, DWORD PTR [eax+eax*8]
	mov	eax, DWORD PTR _sector$[esp]
	add	edx, edx
	sub	ecx, edx
	inc	ecx
	mov	DWORD PTR [eax], ecx
	pop	esi

; 517  : }

	ret	0
?flpydsk_lba_to_chs@@YAXHPAH00@Z ENDP			; flpydsk_lba_to_chs
_TEXT	ENDS
PUBLIC	?flpydsk_install@@YAXH@Z			; flpydsk_install
EXTRN	?setvect@@YAXHA6AXXZ@Z:PROC			; setvect
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_irq$ = 8						; size = 4
?flpydsk_install@@YAXH@Z PROC				; flpydsk_install

; 521  : 
; 522  : 	//! install irq handler
; 523  : 	setvect (irq, i86_flpy_irq);

	mov	eax, DWORD PTR _irq$[esp-4]
	push	OFFSET ?i86_flpy_irq@@YAXXZ		; i86_flpy_irq
	push	eax
	call	?setvect@@YAXHA6AXXZ@Z			; setvect

; 524  : 
; 525  : 	//! reset the fdc
; 526  : 	flpydsk_reset ();

	call	?flpydsk_reset@@YAXXZ			; flpydsk_reset

; 527  : 
; 528  : 	//! set drive information
; 529  : 	flpydsk_drive_data (13, 1, 0xf, true);

	push	1
	push	15					; 0000000fH
	push	1
	push	13					; 0000000dH
	call	?flpydsk_drive_data@@YAXEEE_N@Z		; flpydsk_drive_data
	add	esp, 24					; 00000018H

; 530  : }

	ret	0
?flpydsk_install@@YAXH@Z ENDP				; flpydsk_install
_TEXT	ENDS
PUBLIC	?flpydsk_set_working_drive@@YAXE@Z		; flpydsk_set_working_drive
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_drive$ = 8						; size = 1
?flpydsk_set_working_drive@@YAXE@Z PROC			; flpydsk_set_working_drive

; 534  : 
; 535  : 	if (drive < 4)

	mov	al, BYTE PTR _drive$[esp-4]
	cmp	al, 4
	jae	SHORT $LN1@flpydsk_se@3

; 536  : 		_CurrentDrive = drive;

	mov	BYTE PTR __CurrentDrive, al
$LN1@flpydsk_se@3:

; 537  : }

	ret	0
?flpydsk_set_working_drive@@YAXE@Z ENDP			; flpydsk_set_working_drive
_TEXT	ENDS
PUBLIC	?flpydsk_get_working_drive@@YAEXZ		; flpydsk_get_working_drive
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
?flpydsk_get_working_drive@@YAEXZ PROC			; flpydsk_get_working_drive

; 541  : 
; 542  : 	return _CurrentDrive;

	mov	al, BYTE PTR __CurrentDrive

; 543  : }

	ret	0
?flpydsk_get_working_drive@@YAEXZ ENDP			; flpydsk_get_working_drive
_TEXT	ENDS
PUBLIC	?flpydsk_read_sector@@YAPAEH@Z			; flpydsk_read_sector
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
tv170 = -4						; size = 4
_sectorLBA$ = 8						; size = 4
?flpydsk_read_sector@@YAPAEH@Z PROC			; flpydsk_read_sector

; 546  : uint8_t* flpydsk_read_sector (int sectorLBA) {

	push	ecx
	push	ebx

; 547  : 
; 548  : 	if (_CurrentDrive >= 4)

	mov	bl, BYTE PTR __CurrentDrive
	cmp	bl, 4
	jb	SHORT $LN2@flpydsk_re@4

; 549  : 		return 0;

	xor	eax, eax
	pop	ebx

; 566  : }

	pop	ecx
	ret	0
$LN2@flpydsk_re@4:

; 550  : 
; 551  : 	//! convert LBA sector to CHS
; 552  : 	int head=0, track=0, sector=1;
; 553  : 	flpydsk_lba_to_chs (sectorLBA, &head, &track, &sector);

	mov	ecx, DWORD PTR _sectorLBA$[esp+4]
	mov	eax, 954437177				; 38e38e39H
	imul	ecx
	sar	edx, 3
	push	ebp
	push	esi
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	lea	eax, DWORD PTR [esi+esi*8]
	add	eax, eax
	add	eax, eax
	mov	edx, ecx
	sub	edx, eax
	mov	eax, 954437177				; 38e38e39H
	imul	edx
	sar	edx, 2
	push	edi
	mov	edi, edx
	shr	edi, 31					; 0000001fH
	add	edi, edx
	mov	eax, 954437177				; 38e38e39H
	imul	ecx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	edx, DWORD PTR [eax+eax*8]
	add	edx, edx
	sub	ecx, edx
	lea	ebp, DWORD PTR [ecx+1]

; 554  : 
; 555  : 	//! turn motor on and seek to track
; 556  : 	flpydsk_control_motor (true);

	cmp	bl, 3
	ja	SHORT $LN37@flpydsk_re@4
	movzx	ecx, bl
	xor	al, al
	cmp	ecx, 3
	ja	SHORT $LN13@flpydsk_re@4
	jmp	DWORD PTR $LN41@flpydsk_re@4[ecx*4]
$LN12@flpydsk_re@4:
	mov	al, 16					; 00000010H
	jmp	SHORT $LN13@flpydsk_re@4
$LN11@flpydsk_re@4:
	mov	al, 32					; 00000020H
	jmp	SHORT $LN13@flpydsk_re@4
$LN10@flpydsk_re@4:
	mov	al, 64					; 00000040H
	jmp	SHORT $LN13@flpydsk_re@4
$LN9@flpydsk_re@4:
	mov	al, 128					; 00000080H
$LN13@flpydsk_re@4:
	or	bl, al
	or	bl, 12					; 0000000cH
	movzx	eax, bl
	push	eax
	push	1010					; 000003f2H
	call	?outportb@@YAXGE@Z			; outportb
	push	20					; 00000014H
	call	?sleep@@YAXH@Z				; sleep
	add	esp, 12					; 0000000cH
$LN37@flpydsk_re@4:

; 557  : 	if (flpydsk_seek ((uint8_t)track, (uint8_t)head) != 0)

	push	edi
	push	esi
	call	?flpydsk_seek@@YAHEE@Z			; flpydsk_seek
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@flpydsk_re@4

; 558  : 		return 0;

	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx

; 566  : }

	pop	ecx
	ret	0
$LN1@flpydsk_re@4:

; 559  : 
; 560  : 	//! read sector and turn motor off
; 561  : 	flpydsk_read_sector_imp ((uint8_t)head, (uint8_t)track, (uint8_t)sector);

	push	ebp
	push	esi
	push	edi
	call	?flpydsk_read_sector_imp@@YAXEEE@Z	; flpydsk_read_sector_imp

; 562  : 	flpydsk_control_motor (false);

	mov	al, BYTE PTR __CurrentDrive
	add	esp, 12					; 0000000cH
	cmp	al, 3
	ja	SHORT $LN31@flpydsk_re@4
	push	4
	push	1010					; 000003f2H
	call	?outportb@@YAXGE@Z			; outportb
	push	20					; 00000014H
	call	?sleep@@YAXH@Z				; sleep
	add	esp, 12					; 0000000cH
$LN31@flpydsk_re@4:

; 563  : 
; 564  : 	//! warning: this is a bit hackish
; 565  : 	return (uint8_t*) DMA_BUFFER;

	mov	eax, DWORD PTR ?DMA_BUFFER@@3HA		; DMA_BUFFER
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 566  : }

	pop	ecx
	ret	0
	npad	3
$LN41@flpydsk_re@4:
	DD	$LN12@flpydsk_re@4
	DD	$LN11@flpydsk_re@4
	DD	$LN10@flpydsk_re@4
	DD	$LN9@flpydsk_re@4
?flpydsk_read_sector@@YAPAEH@Z ENDP			; flpydsk_read_sector
_TEXT	ENDS
END
